# Use Ubuntu x86_64 image
FROM ubuntu:22.04

# Avoid prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        curl \
        clang \
        llvm \
        lldb \
        lld \
        cmake \
        git \
        pkg-config \
        libssl-dev && \
    rm -rf /var/lib/apt/lists/*

# Install Rust nightly
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain nightly -y

# Add cargo to PATH
ENV PATH="/root/.cargo/bin:${PATH}"

# Install cargo-fuzz
RUN cargo install cargo-fuzz

# Set working directory
WORKDIR /citadel

# Copy project files
COPY . .

# Create directory for fuzzing artifacts
RUN mkdir -p /fuzz-artifacts

# Remove the unused config that's causing warnings
RUN rm -f .cargo/config.toml

# Initialize workspace with minimal dependencies
RUN mkdir -p crates/antifingerprint/src \
    crates/networking/src \
    crates/parser/src \
    crates/security/src \
    crates/tabs/src \
    crates/zkvm/src

# Create minimal Cargo.toml files for each dependency
RUN for dir in antifingerprint networking security tabs zkvm; do \
    echo '[package]\nname = "'$dir'"\nversion = "0.1.0"\nedition = "2021"\n\n[lib]\npath = "src/lib.rs"' > crates/$dir/Cargo.toml; \
    echo 'pub mod error { pub struct Error; }' > crates/$dir/src/lib.rs; \
    done

# Create parser crate with required modules
RUN echo '[package]\nname = "parser"\nversion = "0.1.0"\nedition = "2021"\n\n[dependencies]\nhtml5ever = "0.26"\nthiserror = "1.0"\n\n[lib]\npath = "src/lib.rs"' > crates/parser/Cargo.toml && \
    echo 'pub mod html;\npub mod css;\npub mod url;\npub mod dom;\npub mod security;\npub mod error;\npub mod metrics;' > crates/parser/src/lib.rs && \
    echo 'pub struct HtmlParser { source: String } impl HtmlParser { pub fn new(source: &str) -> Self { Self { source: source.to_string() } } pub fn parse(&mut self) -> Result<(), String> { Ok(()) } }' > crates/parser/src/html.rs && \
    mkdir -p crates/parser/src/dom && \
    echo 'pub struct Dom;' > crates/parser/src/dom/mod.rs && \
    echo 'pub struct SecurityContext; impl Default for SecurityContext { fn default() -> Self { Self } }' > crates/parser/src/security.rs && \
    echo 'pub struct Error;' > crates/parser/src/error.rs && \
    echo 'pub struct DocumentMetrics; impl DocumentMetrics { pub fn new() -> Self { Self } }' > crates/parser/src/metrics.rs

# Build the fuzz targets
WORKDIR /citadel/fuzz
RUN cargo +nightly build --verbose

# Set the entrypoint to use cargo-fuzz properly
ENTRYPOINT ["cargo", "fuzz"] 