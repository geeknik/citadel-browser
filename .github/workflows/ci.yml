name: Citadel Browser CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security and Code Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Security Audit
      run: cargo audit
      
    - name: Check for known vulnerabilities
      run: cargo audit --deny warnings

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Format check
      run: cargo fmt --all -- --check
      
    - name: Clippy - Security focused
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::all \
          -D clippy::suspicious \
          -D clippy::complexity \
          -D clippy::perf \
          -D clippy::style \
          -D clippy::pedantic \
          -D clippy::nursery \
          -D clippy::cargo \
          -D clippy::arithmetic_side_effects \
          -D clippy::integer_arithmetic \
          -D clippy::panic \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::indexing_slicing \
          -D clippy::panic_in_result_fn

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build
      run: cargo build --verbose --all-features
      
    - name: Run unit tests
      run: cargo test --verbose --all-features
      
    - name: Run integration tests
      run: cargo test --verbose --test integration_tests
      
    - name: Run parser security tests
      run: cargo test --verbose -p citadel_parser --test security_tests
      
    - name: Run networking security tests
      run: cargo test --verbose -p citadel_networking --test security_tests

  # Memory Safety and Performance Tests
  memory-safety:
    name: Memory Safety Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-nightly-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Valgrind
      run: sudo apt-get install valgrind
      
    - name: Run Miri (Rust interpreter for detecting UB)
      run: |
        cargo +nightly miri test --target x86_64-unknown-linux-gnu \
          -p citadel_parser \
          -p citadel_networking \
          -p citadel_security \
          -p citadel_tabs
      continue-on-error: true # Miri can be strict, allow to continue
      
    - name: Memory leak detection with Valgrind
      run: |
        cargo build --release
        timeout 300 valgrind --leak-check=full --error-exitcode=1 \
          ./target/release/citadel-browser --help || true

  # Fuzz Testing
  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-fuzz-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run HTML parser fuzzer
      run: |
        cd fuzz
        timeout 300 cargo fuzz run html_parser -- -max_total_time=240 || true
        
    - name: Run networking fuzzer (if exists)
      run: |
        cd fuzz
        if [ -f fuzz_targets/networking.rs ]; then
          timeout 300 cargo fuzz run networking -- -max_total_time=240 || true
        fi
        
    - name: Check fuzz results
      run: |
        if [ -d fuzz/artifacts ]; then
          echo "Fuzz artifacts found:"
          ls -la fuzz/artifacts/
          exit 1
        fi

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Generate code coverage
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        flags: unittests
        name: citadel-browser-coverage
        
    - name: Check coverage thresholds
      run: |
        # Parse coverage percentage from lcov.info
        coverage=$(cargo llvm-cov --all-features --workspace --summary-only | grep -oP '\d+\.\d+%' | head -1)
        echo "Current coverage: $coverage"
        
        # Extract numeric value
        numeric_coverage=$(echo $coverage | sed 's/%//')
        
        # Check if coverage meets our minimum threshold (70%)
        if (( $(echo "$numeric_coverage < 70" | bc -l) )); then
          echo "Coverage $coverage is below minimum threshold of 70%"
          exit 1
        fi

  # License and Documentation Checks
  documentation:
    name: Documentation and License
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-docs-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items
      
    - name: Check for missing docs
      run: |
        cargo doc --all-features --no-deps --document-private-items 2>&1 | \
        grep -i "missing documentation" && exit 1 || true
        
    - name: Validate license headers
      run: |
        if [ -x scripts/check_license_headers.sh ]; then
          ./scripts/check_license_headers.sh
        fi

  # Dependency and Supply Chain Security
  dependencies:
    name: Dependency Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-deny
      run: cargo install cargo-deny
      
    - name: Check dependencies
      run: cargo deny check
      
    - name: Check for unused dependencies
      run: |
        cargo install cargo-udeps
        cargo +nightly udeps --all-targets

  # Performance Benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run benchmarks
      run: |
        if [ -d benches ]; then
          cargo bench --all-features
        fi

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, test, memory-safety, fuzz-testing, coverage, documentation, dependencies]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
          echo "Security audit failed"
          exit 1
        fi
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed"
          exit 1
        fi
        if [[ "${{ needs.documentation.result }}" != "success" ]]; then
          echo "Documentation checks failed"
          exit 1
        fi
        if [[ "${{ needs.dependencies.result }}" != "success" ]]; then
          echo "Dependency checks failed"
          exit 1
        fi
        echo "All critical checks passed!" 