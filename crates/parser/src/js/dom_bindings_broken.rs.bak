//! Simplified DOM API bindings for JavaScript execution
//! 
//! This module provides essential JavaScript access to DOM manipulation APIs
//! with security-first design and proper isolation.

use crate::dom::Dom;
use crate::error::ParserResult;
use rquickjs::{Ctx, Function, Object, Value, Array};
use tracing::{info, debug};

/// Set up basic DOM bindings in the JavaScript context
pub fn setup_dom_bindings(ctx: Ctx<'_>, dom: &Dom) -> ParserResult<()> {
    info!("[JS] Setting up DOM bindings for document with title: {}", dom.get_title());
    
    let globals = ctx.globals();
    let document = Object::new(ctx.clone())?;
    
    // document.title
    document.set("title", dom.get_title())?;
    
    // document.getElementById(id) - simplified version
    let get_element_by_id = Function::new(ctx.clone(), |ctx, id: String| {
        debug!("[JS] document.getElementById called with id: {}", id);
        
        let element = Object::new(ctx.clone())?;
        element.set("id", id)?;
        element.set("tagName", "DIV")?;
        element.set("innerHTML", "")?;
        element.set("textContent", "")?;
        
        Ok(Value::from_object(element))
    })?;
    document.set("getElementById", get_element_by_id)?;
    
    // document.createElement(tagName)
    let create_element = Function::new(ctx.clone(), |ctx, tag_name: String| {
        debug!("[JS] document.createElement called with tagName: {}", tag_name);
        
        let element = Object::new(ctx.clone())?;
        element.set("tagName", tag_name.to_uppercase())?;
        element.set("innerHTML", "")?;
        element.set("textContent", "")?;
        element.set("id", "")?;
        element.set("className", "")?;
        
        Ok(element)
    })?;
    document.set("createElement", create_element)?;
    
    // document.querySelector(selector) - simplified
    let query_selector = Function::new(ctx.clone(), |ctx, selector: String| {
        debug!("[JS] document.querySelector called with selector: {}", selector);
        
        if selector.starts_with('#') {
            let element = Object::new(ctx.clone())?;
            element.set("id", &selector[1..])?;
            element.set("tagName", "DIV")?;
            Ok(Value::from_object(element))
        } else {
            Ok(Value::new_null(ctx.clone()))
        }
    })?;
    document.set("querySelector", query_selector)?;
    
    // document.querySelectorAll(selector) - simplified
    let query_selector_all = Function::new(ctx.clone(), |ctx, _selector: String| {
        debug!("[JS] document.querySelectorAll called");
        Array::new(ctx.clone())
    })?;
    document.set("querySelectorAll", query_selector_all)?;
    
    globals.set("document", document)?;
    
    Ok(())
}

/// Set up console object for JavaScript logging
pub fn setup_console_bindings(ctx: Ctx<'_>) -> ParserResult<()> {
    info!("[JS] Setting up console bindings");
    
    let globals = ctx.globals();
    let console = Object::new(ctx.clone())?;
    
    // console.log - simplified without Rest parameters
    let log = Function::new(ctx.clone(), |_ctx, message: String| {
        info!("[Console] {}", message);
        Ok(())
    })?;
    console.set("log", log)?;
    
    // console.error
    let error = Function::new(ctx.clone(), |_ctx, message: String| {
        tracing::warn!("[Console Error] {}", message);
        Ok(())
    })?;
    console.set("error", error)?;
    
    globals.set("console", console)?;
    
    Ok(())
}

/// Set up window object with basic properties
pub fn setup_window_bindings(ctx: Ctx<'_>) -> ParserResult<()> {
    info!("[JS] Setting up window bindings");
    
    let globals = ctx.globals();
    
    // window.location (simplified)
    let location = Object::new(ctx.clone())?;
    location.set("href", "https://example.com")?;
    location.set("protocol", "https:")?;
    location.set("host", "example.com")?;
    globals.set("location", location)?;
    
    // window.setTimeout - disabled for security
    let set_timeout = Function::new(ctx.clone(), |_ctx, _callback: Function, _delay: i32| {
        debug!("[JS] setTimeout called (disabled for security)");
        Ok(1) // Return fake timer ID
    })?;
    globals.set("setTimeout", set_timeout)?;
    
    // window.alert - security limited
    let alert = Function::new(ctx.clone(), |_ctx, message: String| {
        info!("[JS Alert] {}", message);
        Ok(())
    })?;
    globals.set("alert", alert)?;
    
    // Make window reference itself
    globals.set("window", globals.clone())?;
    
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::dom::Dom;
    use rquickjs::{Runtime, Context};
    
    #[test]
    fn test_simple_dom_bindings() {
        let dom = Dom::new();
        let runtime = Runtime::new().unwrap();
        let context = Context::full(&runtime).unwrap();
        
        context.with(|ctx| {
            let result = setup_dom_bindings(ctx, &dom);
            assert!(result.is_ok());
        });
    }
    
    #[test]
    fn test_simple_console_bindings() {
        let runtime = Runtime::new().unwrap();
        let context = Context::full(&runtime).unwrap();
        
        context.with(|ctx| {
            let result = setup_console_bindings(ctx);
            assert!(result.is_ok());
        });
    }
    
    #[test]
    fn test_javascript_execution() {
        let dom = Dom::new();
        let runtime = Runtime::new().unwrap();
        let context = Context::full(&runtime).unwrap();
        
        context.with(|ctx| {
            setup_dom_bindings(ctx, &dom).unwrap();
            setup_console_bindings(ctx).unwrap();
            
            // Test basic JavaScript execution
            let result: rquickjs::Result<Value> = ctx.eval("document.title");
            assert!(result.is_ok());
            
            // Test element creation
            let result: rquickjs::Result<Value> = ctx.eval("document.createElement('div').tagName");
            assert!(result.is_ok());
        });
    }
}